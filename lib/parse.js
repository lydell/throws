// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Simon Lydell

This file is part of throws.

throws is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

throws is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with throws. If not,
see <http://www.gnu.org/licenses/>.
*/

var parse, regexRegex;

regexRegex = /^\/((?:\\[\s\S]|[^\\\/])+)\//;

parse = function(string, splitChar) {
  var exactString, isRegex, match, modifiers, reachedEnd, regex, splitCharPos, subString, wholeMatch, _results;
  if (typeof string !== "string") {
    throw new TypeError("`string` must be a string.");
  }
  if (!(typeof splitChar === "string" && splitChar.length === 1)) {
    throw new Error("`splitChar` must be a single character.");
  }
  if (string === splitChar) {
    throw new Error("`string` must not contain only `splitChar`.");
  }
  if (string[0] === splitChar && string[string.length - 1] === splitChar) {
    exactString = string.slice(1, -1);
    return exactString;
  }
  reachedEnd = false;
  _results = [];
  while (!reachedEnd) {
    isRegex = string[0] === "/" && string[1] !== "/";
    if (isRegex) {
      match = string.match(regexRegex);
      if (!match) {
        throw new SyntaxError("Unterminated regular expression: " + string);
      }
      wholeMatch = match[0], regex = match[1];
      string = string.slice(wholeMatch.length);
    }
    splitCharPos = string.indexOf(splitChar);
    if (splitCharPos === -1) {
      splitCharPos = string.length;
      reachedEnd = true;
    }
    subString = string.slice(0, splitCharPos);
    string = string.slice(splitCharPos + 1);
    if (isRegex) {
      modifiers = subString;
      _results.push(RegExp(regex, modifiers));
    } else {
      _results.push(subString.replace(/^\/{2,}/, function(slashes) {
        return slashes.slice(1);
      }));
    }
  }
  return _results;
};

module.exports = parse;
