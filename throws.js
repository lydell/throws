;(function(){

/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(path, parent, orig) {
  var resolved = require.resolve(path);

  // lookup failed
  if (null == resolved) {
    orig = orig || path;
    parent = parent || 'root';
    var err = new Error('Failed to require "' + orig + '" from "' + parent + '"');
    err.path = orig;
    err.parent = parent;
    err.require = true;
    throw err;
  }

  var module = require.modules[resolved];

  // perform real require()
  // by invoking the module's
  // registered function
  if (!module._resolving && !module.exports) {
    var mod = {};
    mod.exports = {};
    mod.client = mod.component = true;
    module._resolving = true;
    module.call(this, mod.exports, require.relative(resolved), mod);
    delete module._resolving;
    module.exports = mod.exports;
  }

  return module.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path) {
  if (path.charAt(0) === '/') path = path.slice(1);

  var paths = [
    path,
    path + '.js',
    path + '.json',
    path + '/index.js',
    path + '/index.json'
  ];

  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    if (require.modules.hasOwnProperty(path)) return path;
    if (require.aliases.hasOwnProperty(path)) return require.aliases[path];
  }
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `definition`.
 *
 * @param {String} path
 * @param {Function} definition
 * @api private
 */

require.register = function(path, definition) {
  require.modules[path] = definition;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to) {
  if (!require.modules.hasOwnProperty(from)) {
    throw new Error('Failed to alias "' + from + '", it does not exist');
  }
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function localRequire(path) {
    var resolved = localRequire.resolve(path);
    return require(resolved, parent, path);
  }

  /**
   * Resolve relative to the parent.
   */

  localRequire.resolve = function(path) {
    var c = path.charAt(0);
    if ('/' == c) return path.slice(1);
    if ('.' == c) return require.normalize(p, path);

    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    var segs = parent.split('/');
    var i = lastIndexOf(segs, 'deps') + 1;
    if (!i) i = 0;
    path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
    return path;
  };

  /**
   * Check if module is defined at `path`.
   */

  localRequire.exists = function(path) {
    return require.modules.hasOwnProperty(localRequire.resolve(path));
  };

  return localRequire;
};
require.register("throws/lib/throws.js", function(exports, require, module){
// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Simon Lydell

This file is part of throws.

throws is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

throws is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with throws. If not,
see <http://www.gnu.org/licenses/>.
*/

var compare, parse, throws,
  __slice = [].slice;

parse = require("./parse");

compare = require("./compare");

throws = function() {
  var arg, args, error, errorConstructor, fn, test, _ref;
  test = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
  switch (false) {
    case !(test instanceof Error):
      errorConstructor = test.constructor;
      break;
    case !((test != null ? test.prototype : void 0) instanceof Error || test === Error):
      errorConstructor = test;
      break;
    case typeof test !== "function":
      args.unshift(fn);
      fn = test;
      test = null;
      break;
    default:
      throw new TypeError("`test` must be an error instance (`test instanceof Error`),\nor an error constructor (a subclass of `Error` or `Error` itself).");
  }
  if (typeof fn !== "function") {
    throw new TypeError("`fn` must be a function.");
  }
  try {
    fn.apply(null, args);
    throws.messageHolder.message = "Expected function to throw";
    return false;
  } catch (_error) {
    error = _error;
    if (!test) {
      return true;
    }
  }
  arg = throws.parse((_ref = test.message) != null ? _ref : "", throws.splitChar);
  return throws.compare(error, errorConstructor, arg, throws.messageHolder);
};

throws.parse = parse;

throws.compare = compare;

throws.splitChar = "|";

throws.messageHolder = {};

module.exports = throws;

});
require.register("throws/lib/parse.js", function(exports, require, module){
// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Simon Lydell

This file is part of throws.

throws is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

throws is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with throws. If not,
see <http://www.gnu.org/licenses/>.
*/

var parse, regexRegex;

regexRegex = /^\/((?:\\[\s\S]|[^\\\/])+)\//;

parse = function(string, splitChar) {
  var exactString, isRegex, match, modifiers, reachedEnd, regex, splitCharPos, subString, wholeMatch, _results;
  if (typeof string !== "string") {
    throw new TypeError("`string` must be a string.");
  }
  if (!(typeof splitChar === "string" && splitChar.length === 1)) {
    throw new Error("`splitChar` must be a single character.");
  }
  if (string === splitChar) {
    throw new Error("`string` must not contain only `splitChar`.");
  }
  if (string[0] === splitChar && string[string.length - 1] === splitChar) {
    exactString = string.slice(1, -1);
    return exactString;
  }
  reachedEnd = false;
  _results = [];
  while (!reachedEnd) {
    isRegex = string[0] === "/" && string[1] !== "/";
    if (isRegex) {
      match = string.match(regexRegex);
      if (!match) {
        throw new SyntaxError("Unterminated regular expression: " + string);
      }
      wholeMatch = match[0], regex = match[1];
      string = string.slice(wholeMatch.length);
    }
    splitCharPos = string.indexOf(splitChar);
    if (splitCharPos === -1) {
      splitCharPos = string.length;
      reachedEnd = true;
    }
    subString = string.slice(0, splitCharPos);
    string = string.slice(splitCharPos + 1);
    if (isRegex) {
      modifiers = subString;
      _results.push(RegExp(regex, modifiers));
    } else {
      _results.push(subString.replace(/^\/{2,}/, function(slashes) {
        return slashes.slice(1);
      }));
    }
  }
  return _results;
};

module.exports = parse;

});
require.register("throws/lib/compare.js", function(exports, require, module){
// Generated by CoffeeScript 1.6.3
/*
Copyright 2013 Simon Lydell

This file is part of throws.

throws is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

throws is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with throws. If not,
see <http://www.gnu.org/licenses/>.
*/

var compare;

compare = function(error, errorConstructor, arg, messageHolder) {
  var array, exactString, item, message, messageLowerCase, regex, subString, valid, _i, _len;
  if (arg == null) {
    arg = null;
  }
  if (messageHolder == null) {
    messageHolder = {};
  }
  messageHolder.message = "Expected error to be an instance of `" + errorConstructor.name + "`";
  if (!(error instanceof errorConstructor)) {
    return false;
  }
  if (arg === null) {
    return true;
  }
  message = error.message;
  if (typeof arg === "string") {
    exactString = arg;
    messageHolder.message = "Expected `" + message + "` to exactly equal `" + exactString + "`";
    if (message !== exactString) {
      return false;
    }
  } else {
    array = arg;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      valid = typeof item === "string" ? (subString = item.toLowerCase(), messageLowerCase = message.toLowerCase(), messageHolder.message = "Expected `" + subString + "` to be present in `" + messageLowerCase + "`", messageLowerCase.indexOf(subString.toLowerCase()) >= 0) : (regex = item, messageHolder.message = "Expected " + regex + " to match `" + message + "`", regex.test(message));
      if (!valid) {
        return false;
      }
    }
  }
  return true;
};

module.exports = compare;

});
require.alias("throws/lib/throws.js", "throws/index.js");if (typeof exports == "object") {
  module.exports = require("throws");
} else if (typeof define == "function" && define.amd) {
  define(function(){ return require("throws"); });
} else {
  this["throws"] = require("throws");
}})();